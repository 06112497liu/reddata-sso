/*
 * bbdservice.com Inc.
 * Copyright (c) 2017 All Rights Reserved.
 */
package com.bbd.bdsso.common.dal.ibatis;

import org.springframework.orm.ibatis.support.SqlMapClientDaoSupport;

import com.bbd.bdsso.common.dal.daointerface.SsoUserInfoDAO;

// auto generated imports
import com.bbd.bdsso.common.dal.dataobject.SsoUserInfoDO;
import org.springframework.dao.DataAccessException;

import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * An ibatis based implementation of dao interface <tt>com.bbd.bdsso.common.dal.daointerface.SsoUserInfoDAO</tt>.
 *
 * This file is generated by <tt>bdsso-bbdalgen</tt>, a DAL (Data Access Layer)
 * code generation utility specially developed for <tt>bdsso</tt> project.
 * 
 * PLEASE DO NOT MODIFY THIS FILE MANUALLY, or else your modification may
 * be OVERWRITTEN by someone else. To modify the file, you should go to 
 * directory <tt>(project-home)/bbdalgen</tt>, and 
 * find the corresponding configuration file (<tt>tables/sso_user_info.xml</tt>). 
 * Modify the configuration file according to your needs, then run <tt>bdsso-bbdalgen</tt> 
 * to generate this file.
 *
 * @author Byron Zhang
 * @version $Id: description-java.vm,v 1.1 2016/05/01 07:34:20 byron Exp $
 */
public class IbatisSsoUserInfoDAO extends SqlMapClientDaoSupport implements SsoUserInfoDAO {
	/**
	 *  Insert one <tt>SsoUserInfoDO</tt> object to DB table <tt>sso_user_info</tt>, return primary key
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into sso_user_info(user_id,pers_id,name,dept_name,region,law_num,duty,card_id,phone,last_modifier,gmt_create,gmt_modified) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param ssoUserInfo
	 *	@return Integer
	 *	@throws DataAccessException
	 */	 
    public Integer insert(SsoUserInfoDO ssoUserInfo) throws DataAccessException {
    	if (ssoUserInfo == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        getSqlMapClientTemplate().insert("MS-SSO-USER-INFO-INSERT", ssoUserInfo);

        return ssoUserInfo.getId();
    }

	/**
	 *  Delete records from DB table <tt>sso_user_info</tt>.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from sso_user_info where (id = ?)</tt>
	 *
	 *	@param userId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUserId(Integer userId) throws DataAccessException {

        return getSqlMapClientTemplate().delete("MS-SSO-USER-INFO-DELETE-BY-USER-ID", userId);
    }

	/**
	 *  Query DB table <tt>sso_user_info</tt> for records.
	 *
   	 *  <p>
   	 *  Description for this operation is<br>
   	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, pers_id, name, dept_name, region, law_num, duty, card_id, phone, last_modifier, gmt_create, gmt_modified from sso_user_info</tt>
	 *
	 *	@return List<SsoUserInfoDO>
	 *	@throws DataAccessException
	 */	 
    public List<SsoUserInfoDO> queryAll(String region) throws DataAccessException {
		Map param = new HashMap();

		param.put("region", region);
        return getSqlMapClientTemplate().queryForList("MS-SSO-USER-INFO-QUERY-ABNORMAL-ALL", param);

    }

	public List<SsoUserInfoDO> queryAll() throws DataAccessException {

		return getSqlMapClientTemplate().queryForList("MS-SSO-USER-INFO-QUERY-ALL");

	}

	@Override
	public List<SsoUserInfoDO> queryOpinionAll(String region) throws DataAccessException {
		return getSqlMapClientTemplate().queryForList("MS-SSO-USER-INFO-QUERY-OPINION-ALL");
	}

	/**
	 *  Query DB table <tt>sso_user_info</tt> for records.
	 *
	 *  <p>
	 *  Description for this operation is<br>
	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, pers_id, name, dept_name, region, law_num, duty, card_id, phone, last_modifier, gmt_create, gmt_modified from sso_user_info</tt>
	 *
	 *	@return List<SsoUserInfoDO>
	 *	@throws DataAccessException
	 */
	public List<SsoUserInfoDO> queryByUserIds(List<Integer> userIds) throws DataAccessException {
		Map param = new HashMap();

		param.put("userIds", userIds);
		return getSqlMapClientTemplate().queryForList("MS-SSO-USER-INFO-QUERY-BY-USER-IDS", param);
	}

	/**
	 *  Query DB table <tt>sso_user_info</tt> for records.
	 *
	 *  <p>
	 *  Description for this operation is<br>
	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, pers_id, name, dept_name, region, law_num, duty, card_id, phone, last_modifier, gmt_create, gmt_modified from sso_user_info</tt>
	 *
	 *	@return SsoUserInfoDO
	 *	@throws DataAccessException
	 */
	public SsoUserInfoDO queryByUserId(Integer userId) throws DataAccessException {
		return (SsoUserInfoDO) getSqlMapClientTemplate().queryForObject("MS-SSO-USER-INFO-QUERY-BY-USER-ID", userId);
	}

	/**
	 *  Query DB table <tt>sso_user_info</tt> for records.
	 *
	 *  <p>
	 *  Description for this operation is<br>
	 *  <tt></tt>
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select id, user_id, pers_id, name, dept_name, region, law_num, duty, card_id, phone, last_modifier, gmt_create, gmt_modified from sso_user_info</tt>
	 *
	 *	@return int
	 *	@throws DataAccessException
	 */
	public int update(Integer userId,String persId,String name,String deptName,String region,String lawNum,String duty,String cardId,String phone,String lastModifier) throws DataAccessException{
		Map param = new HashMap();

		param.put("userId", userId);
		param.put("persId", persId);
		param.put("name", name);
		param.put("deptName", deptName);
		param.put("region", region);
		param.put("lawNum", lawNum);
		param.put("duty", duty);
		param.put("cardId", cardId);
		param.put("phone", phone);
		param.put("lastModifier", lastModifier);

		return getSqlMapClientTemplate().update("MS-SSO-USER-INFO-UPDATE", param);
	}
}