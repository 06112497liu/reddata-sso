<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<!-- ==========================================================  -->
<!-- Configuration for ibatis sqlmap mapping.                    -->
<!-- ==========================================================  -->

<!-- ======================================================================================================= -->
<!-- This file is generated by bbdalgen (BBD Data Layer Generator), PLEASE DO NOT MODIFY THIS FILE MANUALLY! -->
<!--                                                                                                         -->
<!-- @author Byron Zhang                                                                                     -->
<!-- ======================================================================================================= -->

<sqlMap>
    <!-- ============================================= -->
    <!-- RESULT MAPS                                   -->
    <!-- ============================================= -->

    <!-- result maps for database table sso_user_info -->
    <resultMap id="RM-SSO-USER-INFO" class="com.bbd.bdsso.common.dal.dataobject.SsoUserInfoDO">
        <result property="id" column="id" javaType="java.lang.Integer" jdbcType="int"/>
        <result property="userId" column="user_id" javaType="int" jdbcType="int" nullValue="0"/>
        <result property="persId" column="pers_id" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="name" column="name" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="deptName" column="dept_name" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="region" column="region" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="lawNum" column="law_num" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="duty" column="duty" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="cardId" column="card_id" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="phone" column="phone" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="lastModifier" column="last_modifier" javaType="java.lang.String" jdbcType="varchar"/>
        <result property="gmtCreate" column="gmt_create" javaType="java.util.Date" jdbcType="timestamp"/>
        <result property="gmtModified" column="gmt_modified" javaType="java.util.Date" jdbcType="timestamp"/>
    </resultMap>


    <!-- ============================================= -->
    <!-- mapped statements for IbatisSsoUserInfoDAO -->
    <!-- ============================================= -->
    <!-- mapped statement for IbatisSsoUserInfoDAO.insert -->
    <insert id="MS-SSO-USER-INFO-INSERT">
        INSERT /*MS-BDSSO-SSO-USER-INFO-INSERT*/ INTO 
				sso_user_info (
					user_id,
					pers_id,
					name,
					dept_name,
					region,
					law_num,
					duty,
					card_id,
					phone,
					last_modifier, 
					gmt_create, 
					gmt_modified
				)
				VALUES (#userId#, #persId#, #name#, #deptName#, #region#, #lawNum#,#duty#,#cardId#,#phone#,#lastModifier#, now(), now());
    </insert>

    <!-- mapped statement for IbatisSsoUserInfoDAO.deleteByUserId -->
    <delete id="MS-SSO-USER-INFO-DELETE-BY-USER-ID" >
        DELETE /*MS-BDSSO-SSO-USER-INFO-DELETE*/ FROM
					sso_user_info
				WHERE 
					user_id = #userId#;
    </delete>

    <!-- mapped statement for IbatisSsoUserInfoDAO.queryAll -->
    <select id="MS-SSO-USER-INFO-QUERY-ABNORMAL-ALL" resultMap="RM-SSO-USER-INFO" >
		SELECT /*MS-BDSSO-SSO-USER-INFO-QUERY-ALL*/
		a.id,
		a.user_id,
		a.pers_id,
		a.name,
		a.dept_name,
		a.region,
		a.law_num,
		a.duty,
		a.card_id,
		a.phone,
		a.last_modifier,
		a.gmt_create,
		a.gmt_modified
		FROM
		sso_user_info a
		INNER JOIN
		sso_user_role b
		ON
		a.user_id = b.user_id
		INNER JOIN
		sso_role_auth c
		ON
		b.role_id = c.role_id
		INNER JOIN
		sso_auth_resource d
		ON
		c.auth_id = d.auth_id
		INNER JOIN
		sso_resource e
		ON
		d.resource_id = e.id
		WHERE
		e.resource_name = 'ABNORAL_ALLOW_FORWARDING'
		AND
		a.user_id NOT IN (
		SELECT a.user_id
		FROM
		sso_user_info a
		INNER JOIN
		sso_user_role b
		ON
		a.user_id = b.user_id
		INNER JOIN
		sso_role_auth c
		ON
		b.role_id = c.role_id
		INNER JOIN
		sso_auth_resource d
		ON
		c.auth_id = d.auth_id
		INNER JOIN
		sso_resource e
		ON
		d.resource_id = e.id
		WHERE e.resource_name ='ABNORAL_IS_ADMIN')
		<isNotNull prepend="and" property="region">
			region = #region#
		</isNotNull>
		GROUP BY a.user_id
    </select>

	<!-- mapped statement for IbatisSsoUserInfoDAO.queryOpinionAll -->
	<select id="MS-SSO-USER-INFO-QUERY-OPINION-ALL" resultMap="RM-SSO-USER-INFO" >
		SELECT /*MS-SSO-USER-INFO-QUERY-OPINION-ALL*/
				a.id,
				a.user_id,
				a.pers_id,
				a.name,
				a.dept_name,
				a.region,
				a.law_num,
				a.duty,
				a.card_id,
				a.phone,
				a.last_modifier,
				a.gmt_create,
				a.gmt_modified
		FROM
				sso_user_info a,
				sso_user_role b,
				sso_role_auth c,
				sso_auth_resource d,
				sso_resource e
		WHERE
				a.user_id = b.user_id
				AND b.role_id = c.role_id
				AND c.auth_id = d.auth_id
				AND d.resource_id = e.id
				<isNotNull prepend="and" property="region">
					a.region = #region#
				</isNotNull>
				AND e.resource_name LIKE 'OPINION_%'
		GROUP BY
				a.user_id
	</select>

	<!-- mapped statement for IbatisSsoUserInfoDAO.queryAll -->
	<select id="MS-SSO-USER-INFO-QUERY-ALL" resultMap="RM-SSO-USER-INFO" >
		SELECT /*MS-BDSSO-SSO-USER-INFO-QUERY-ALL*/
		id,
		user_id,
		pers_id,
		name,
		dept_name,
		region,
		law_num,
		duty,
		card_id,
		phone,
		last_modifier,
		gmt_create,
		gmt_modified
		FROM
		sso_user_info
		WHERE
		1 = 1
		<isNotNull prepend="and" property="region">
			region = #region#
		</isNotNull>

	</select>

	<!-- mapped statement for IbatisSsoUserInfoDAO.queryByUserId -->
	<select id="MS-SSO-USER-INFO-QUERY-BY-USER-IDS" resultMap="RM-SSO-USER-INFO" >
		SELECT /*MS-SSO-USER-INFO-QUERY-BY-USER-ID*/
		id,
		user_id,
		pers_id,
		name,
		dept_name,
		region,
		law_num,
		duty,
		card_id,
		phone,
		last_modifier,
		gmt_create,
		gmt_modified
		FROM
		sso_user_info
		WHERE
		1 = 1
		<isNotEmpty prepend=" and " property="userIds">
			user_id in
			<iterate open="(" close=")" conjunction="," property="userIds">
				#userIds[]#
			</iterate>
		</isNotEmpty>
	</select>

	<!-- mapped statement for IbatisSsoUserInfoDAO.queryByUserId -->
	<select id="MS-SSO-USER-INFO-QUERY-BY-USER-ID" resultMap="RM-SSO-USER-INFO" >
		SELECT /*MS-SSO-USER-INFO-QUERY-BY-USER-ID*/
		id,
		user_id,
		pers_id,
		name,
		dept_name,
		region,
		law_num,
		duty,
		card_id,
		phone,
		last_modifier,
		gmt_create,
		gmt_modified
		FROM
		sso_user_info
		WHERE
		user_id = #userId#
	</select>

	<insert id="MS-SSO-USER-INFO-UPDATE">
		UPDATE /*MS-SSO-USER-INFO-UPDATE*/
			sso_user_info
		SET
			user_id = #userId#,
			pers_id = #persId#,
			name = #name#,
			dept_name = #deptName#,
			region = #region#,
			law_num = #lawNum#,
			duty = #duty#,
			card_id = #cardId#,
			phone = #phone#,
			last_modifier = #lastModifier#,
			gmt_modified  = now()
		WHERE
			user_id = #userId#

	</insert>
</sqlMap>